#created on: Nov 20, 2011
package com.rakursy.timetable.rules;
	dialect "java"

import org.drools.planner.core.score.constraint.ConstraintType;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreCalculator;

import com.rakursy.timetable.model.*;
import java.util.ArrayList;
import java.lang.Math;

global HardAndSoftScoreCalculator scoreCalculator;

// ############################################################################
// # Hard constraints
// ############################################################################

// A teacher cannot teach 2 classes at the same time
rule "conflictingTeacherTimes"
    when
    	$sg1 : StudentGroup( $teacher : teacher )
    	$sg2 : StudentGroup( teacher == $teacher )
    	$sc1 : SchoolClass( studentGroup == $sg1, $period : period, $id : id )
    	$sc2 : SchoolClass( studentGroup == $sg2, period == $period, id != $id )
    then
        insertLogical(new IntConstraintOccurrence("conflictingTeacherTimes", ConstraintType.NEGATIVE_HARD, 
        		15, 
        		$sc1, $sc2, $teacher));
end

// A grade cannot have 2 classes at the same time
rule "conflictingGradeTimes"
    when
    	$sg1 : StudentGroup( $grade : grade, $subject : subject )
    	$sg2 : StudentGroup( grade == $grade, subject != $subject )
    	$sc1 : SchoolClass( studentGroup == $sg1, $period : period, $id : id )
    	$sc2 : SchoolClass( studentGroup == $sg2, period == $period, id != $id )
    then
        insertLogical(new IntConstraintOccurrence("conflictingGradeTimes", ConstraintType.NEGATIVE_HARD, 
        		15,
        		$sc1, $sc2, $sg1, $sg2));
end

// A room cannot host 2 classes at the same time
rule "conflictingRoomTimes"
	when
    	$sc1 : SchoolClass( $room : room, $period : period, $id : id )
    	$sc2 : SchoolClass( room == $room, period == $period, id > $id )
	then
        insertLogical(new IntConstraintOccurrence("conflictingRoomTimes", ConstraintType.NEGATIVE_HARD, 
        		15, 
        		$sc1, $sc2, $room));
end

rule "subjectWeightWithinLimits"
	when
		$grade : Grade()
		$subjects : ArrayList() from accumulate ( SchoolClass( studentGroup.grade == $grade, $subject : subject ), collectList( $subject ) )
		$totalWeight : Number() from accumulate ( Subject( $weight : weight ) from $subjects , sum( $weight ) )
		$sd : SchoolDay( $totalWeight < minAllowedWeight || $totalWeight > maxAllowedWeight )
	then
		insertLogical(new IntConstraintOccurrence("subjectWeightWithinLimits", ConstraintType.NEGATIVE_HARD, 
				$grade, $totalWeight, $sd));
end

rule "exactClassCountPerSubjectPerWeek"
	when
		$gradeSubject : GradeSubject( $subject : subject )
		$grade : Grade( subjects contains $gradeSubject )
		//$studentGroup : StudentGroup( grade == $grade, subject == $subject )
		$classCount : Number() from accumulate ( SchoolClass( studentGroup.grade == $grade, subject == $subject, $id : id ) , count( $id ) )
		eval( $grade.getClassCountForSubject($subject).intValue() != $classCount.intValue() )
	then
		insertLogical(new IntConstraintOccurrence("exactClassCountPerSubjectPerWeek", ConstraintType.NEGATIVE_HARD, 
				$subject, $classCount));
end

// The total number of seats in the room of a given school class cannot be lower than the number of students
rule "roomCapacityMustSuffice"
	when
		$room : Room( $capacity : capacity )
		SchoolClass( room == $room, studentGroup.studentCount > $capacity )
	then
		insertLogical(new IntConstraintOccurrence("roomCapacityMustSuffice", ConstraintType.NEGATIVE_HARD, 
				$room));
end

// A room can only host subjects which are in the room's possible subjects list
rule "roomCannotBeHostToAllSubjects"
	when
		$subject : Subject()
		$room : Room( possibleSubjects not contains $subject )
		$sc : SchoolClass( room == $room, subject == $subject )
	then
		insertLogical(new IntConstraintOccurrence("roomCannotBeHostToAllSubjects", ConstraintType.NEGATIVE_HARD, 
				$sc, $room, $subject));
end

rule "teacherCanOnlyTeachSomeSubjects"
	when
		$subject : Subject()
		$teacher : Teacher( subjects not contains $subject )
		$sc : SchoolClass( teacher == $teacher, subject == $subject )
	then
		insertLogical(new IntConstraintOccurrence("teacherCanOnlyTeachSomeSubjects", ConstraintType.NEGATIVE_HARD, 
				$sc, $teacher, $subject));
end

rule "studentGroupsMustHaveTheSameClass"
	when
		$sg1 : StudentGroup( $grade : grade, $subject : subject, $teacher : teacher, wholeGrade == false, $sgid : id )
		$sg2 : StudentGroup( grade == $grade, subject == $subject, teacher != $teacher, wholeGrade == false, id != $sgid )
		SchoolClass( studentGroup == $sg1, $period : period, $scid : id )
		not SchoolClass( studentGroup == $sg2, period == $period, id != $scid ) 
	then
		insertLogical(new IntConstraintOccurrence("studentGroupsMustHaveTheSameClass", ConstraintType.NEGATIVE_HARD, 
				2, 
				$sg1, $sg2, $grade, $subject, $period));
end

rule "schoolClassesMustBeInARow"
	when
		$schoolDay : SchoolDay()
		SchoolClass( $grade : studentGroup.grade, period.schoolDay == $schoolDay, $period1 : period )
		SchoolClass( studentGroup.grade == $grade, period.schoolHour.actualStartTime > $period1.schoolHour.actualStartTime + 1, 
				period.schoolDay == $schoolDay, $period2 : period )
				
		not( SchoolClass( period.schoolHour.actualStartTime > $period1.schoolHour.actualStartTime 
						&& period.schoolHour.actualStartTime < $period2.schoolHour.actualStartTime,
						period.schoolDay == $schoolDay,
						studentGroup.grade == $grade ) )
	then
		insertLogical(new IntConstraintOccurrence("schoolClassesMustBeInARow", ConstraintType.NEGATIVE_HARD, 
				Math.abs($period1.getSchoolHour().getActualStartTime() - $period2.getSchoolHour().getActualStartTime()), 
				$period1, $period2, $grade));
end

rule "schoolClassesMustStartAtTheBeginnining"
	when
		$schoolDay : SchoolDay()
		$grade : Grade()
		not( SchoolClass( studentGroup.grade == $grade, period.schoolHour.actualStartTime == 1, period.schoolDay == $schoolDay ) )
	then
		insertLogical(new IntConstraintOccurrence("schoolClassesMustStartAtTheBeginnining", ConstraintType.NEGATIVE_HARD, 
				$grade));
end

// ############################################################################
// # Soft constraints
// ############################################################################

rule "optimalSchoolClassPlacement"
	when
		$schoolDay : SchoolDay()
		SchoolClass( $subject : subject, $grade : studentGroup.grade, $period1 : period, period.schoolDay == $schoolDay, $id : id )
		SchoolClass( subject == $subject, studentGroup.grade == $grade, $period2 : period, period.schoolDay == $schoolDay, id > $id )
		eval( Math.abs($period1.getSchoolHour().getActualStartTime() - $period2.getSchoolHour().getActualStartTime() ) > 1 )
	then
		insertLogical(new IntConstraintOccurrence("optimalSchoolClassPlacement", ConstraintType.NEGATIVE_SOFT, 
				Math.abs($period1.getSchoolHour().getActualStartTime() - $period2.getSchoolHour().getActualStartTime()) ));
end

rule "schoolClassesInClassRoomIfPossible"
	when
		$subject : Subject()
		$room : Room( possibleSubjects contains $subject )
		$grade : Grade( classRoom == $room )
		SchoolClass( subject == $subject, studentGroup.grade == $grade, room != $room, $period : period, $id : id )
		not(exists( SchoolClass( subject  == $subject, studentGroup.grade == $grade, room == $room, period == $period, id != $id ) ))
	then
		insertLogical(new IntConstraintOccurrence("schoolClassesInClassRoomIfPossible", ConstraintType.NEGATIVE_SOFT, 
				$subject, $room, $grade));
end

rule "schoolClassesProperlyDistributed"
	when
		$schoolDay1 : SchoolDay()
		$schoolDay2 : SchoolDay()
		$classesInSchoolDay1 : Number() from accumulate ( SchoolClass( period.schoolDay == $schoolDay1, $id : id ) , count( $id ) )
		$classesInSchoolDay2 : Number() from accumulate ( SchoolClass( period.schoolDay == $schoolDay2, $id : id ) , count( $id ) )
		eval( Math.abs($classesInSchoolDay1.intValue() - $classesInSchoolDay2.intValue()) > 1 )
	then
		insertLogical(new IntConstraintOccurrence("schoolClassesProperlyDistributed", ConstraintType.NEGATIVE_SOFT, 
				Math.abs($classesInSchoolDay1.intValue() - $classesInSchoolDay2.intValue()), 
				$schoolDay1, $schoolDay2, $classesInSchoolDay1, $classesInSchoolDay2));
end

rule "periodOffRequestsShouldBeSatisfied"
	when
		$period : Period( $schoolDay : schoolDay, $schoolHour : schoolHour ) 
		PeriodOffRequest( $teacher : teacher, dayOfWeek == $schoolDay.dayOfWeek, schoolHourStartTime == $schoolHour.actualStartTime )
		SchoolClass( teacher == $teacher, period == $period )
	then
		insertLogical(new IntConstraintOccurrence("periodOffRequestsShouldBeSatisfied", ConstraintType.NEGATIVE_SOFT, 
				$teacher, $period));
end

// ############################################################################
// # Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight)
        )
    then
        scoreCalculator.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) 
        )
    then
        scoreCalculator.setSoftConstraintsBroken($softTotal.intValue());
end

